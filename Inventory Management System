# Inventory Management System
# Written by Nate Gutierrez


# create empty dictionary named inventory
inventory = {}

# create function named add_item
def add_item(item, price, stock):

    if item in inventory:
        print(f"Error: Item '{item}' already exists.")

    else:
        inventory[item] = {'price': price, 'stock': stock}
        print(f"Item '{item}' added successfully.")

# create funtion named update_stock
def update_stock(item, quantity):   

    if item not in inventory:
        print(f"Error: Item '{item}' not found.")
        return
    
    # calculate stock
    new_stock = inventory[item]['stock'] + quantity

    if new_stock < 0:
        print(f"Error: Insufficient stock for '{item}'.")
        return
    
    inventory[item]['stock'] = new_stock
    print(f"Stock for '{item}' updated successfully.")

# create function check_availability

def check_availability(item):
    if item not in inventory:
        return "Item not found"

    if item in inventory:
        return inventory[item]['stock']

# create sales_report(sales)

def sales_report(sales):
    total_revenue = 0

    for item, quantity_sold in sales.items():
        if item in inventory:
            stock = inventory[item]["stock"]
            price = inventory[item]["price"]
            if quantity_sold <= stock:
                inventory[item]["stock"] -= quantity_sold
                total_revenue += quantity_sold * price
            else:
                print(f"Error: Insufficient stock for '{item}'.")
        else:
            print(f"Error: Item '{item}' not found.")

    return f"Total revenue: ${total_revenue:.2f}"


# bottom code
add_item("Apple", 0.5, 50)
add_item("Banana", 0.2, 60)
sales = {"Apple": 30, "Banana": 20, "Orange": 10}  # Orange should print an error
print(sales_report(sales))  # Should output: 19.0
print(inventory)
